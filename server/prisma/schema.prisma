// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  cognitoId         String    @unique
  username          String    @unique
  password          String? // This field is only for testing purposes
  profilePictureUrl String?
  teamId            Int?
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt

  authoredTasks  Task[]           @relation("TaskAuthor")
  assignedTasks  Task[]           @relation("TaskAssignee")
  taskAssignment TaskAssignment[]
  attachments    Attachment[]
  comments       Comment[]
  // notifications Notification[] can add notification later
  team           Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                   Int       @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  createdAt            DateTime? @default(now())

  projectTeam ProjectTeam[]
  user        User[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?

  task        Task[]
  projectTeam ProjectTeam[]
}

model ProjectTeam {
  id        Int @id @default(autoincrement())
  projectId Int
  teamId    Int

  project Project @relation(fields: [projectId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?   @default("No description")
  status         String?   @default("To Do")
  priority       String?   @default("Low")
  tags           String?
  points         Int?      @default(2)
  startDate      DateTime? @default(now())
  dueDate        DateTime?
  authorUserId   Int
  assignedUserId Int?
  projectId      Int

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [id])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int     @id @default(autoincrement())
  taskId Int
  userId Int
  role   String?

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Attachment {
  id           Int       @id @default(autoincrement())
  fileURL      String
  fileName     String
  caption      String?
  createdAt    DateTime? @default(now())
  taskId       Int
  uploadedById Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [uploadedById], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  createdAt DateTime? @default(now())
  taskId    Int
  userId    Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
